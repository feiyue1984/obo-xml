I should have spent more time investigating the internal working of JVM & Data structures and Algorithms.

If I had not been to the island, I would not have known that Java is NOT a purely compiled language and it lies somewhere between compile languages (eg. Fortran) and the interpreted languages (as Python). 

It's interesting to learn the mark-and-sweep algorithm adopted by the Garbage Collector. How GC searchs the unreferenced objects starting from the GC roots (what are the potential roots?) in the graph in a depth first fashion?

When I do code review, I pay attention to the following:
  -- array can form potential memory leaks
  -- if all public methods are tested in the test class
  -- if instance variables are protected by private access modifier
  
When I code with a colleague, I bear the following in mind:
  -- in case the equals() method is overriden, if the hashcode() method is overriden as well
  -- if you find the existing method names, variable names confusing and misleading, change them at will
  -- the only thing that you cannot modify is the interface
  -- in order to optimize certain algorithm, you need to store 2 dimensional points into a special data structure. In Binary Search Tree, left leaf < root <  right leaf. But this can only deal with 1 dimensional problem. It would be great if you can invent a variant of BST in which each root bears 4 leaves(each represents a point in a quarant).

What would you do in the following cases:
  -- The manager assigns an techncially infeasiable task to you.
  -- You are at the point to make a decision but you don't have time to weigh
  -- What find you most challenging in cooperating with colleagues.
  -- You think you are unfairly treated by manager/colleague

So far no questions regarding design patters. Weird!
